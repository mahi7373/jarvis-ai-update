import os
import moviepy.editor as mp
import gtts
from PIL import Image
from mutagen.mp3 import MP3

class VideoGenerator:
    def __init__(self, output_folder="videos"):
        self.output_folder = output_folder
        os.makedirs(self.output_folder, exist_ok=True)

    def generate_script(self, topic):
        return f"Welcome to this video about {topic}. This video is auto-generated by Jarvis AI. Let's explore it quickly!"

    def text_to_speech(self, script, audio_file):
        tts = gtts.gTTS(script, lang='en')
        tts.save(audio_file)

    def generate_background(self, color=(30, 30, 30), size=(1280, 720)):
        img = Image.new('RGB', size, color=color)
        img_path = os.path.join(self.output_folder, "background.png")
        img.save(img_path)
        return img_path

    def generate_video(self, topic):
        script = self.generate_script(topic)
        print(f"üìù Script Generated: {script}")

        # Voiceover
        audio_path = os.path.join(self.output_folder, "voice.mp3")
        self.text_to_speech(script, audio_path)
        audio_duration = MP3(audio_path).info.length

        # Background Image
        bg_image = self.generate_background()

        # üé¨ Main Video (16:9)
        video_file = os.path.join(self.output_folder, f"{topic}_video.mp4")
        image_clip = mp.ImageClip(bg_image).set_duration(audio_duration)
        audio_clip = mp.AudioFileClip(audio_path)
        video = image_clip.set_audio(audio_clip)
        video.write_videofile(video_file, fps=24)
        print(f"‚úÖ Full Video Ready: {video_file}")

        # üéØ Shorts Video (9:16) - Manual Resize Using PIL
        shorts_file = os.path.join(self.output_folder, f"{topic}_shorts.mp4")
        pil_img = Image.open(bg_image)
        resized_img = pil_img.resize((608, 1080), Image.Resampling.LANCZOS)  # ‚úÖ Fixed resize
        resized_path = os.path.join(self.output_folder, "background_resized.png")
        resized_img.save(resized_path)

        short_clip = mp.ImageClip(resized_path).set_duration(audio_duration)
        short_video = short_clip.set_audio(audio_clip)
        short_video.write_videofile(shorts_file, fps=24)
        print(f"üéØ Shorts Video Ready: {shorts_file}")

        return video_file, shorts_file

